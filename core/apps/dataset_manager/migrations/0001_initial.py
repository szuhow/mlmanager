# Generated by Django 4.2.23 on 2025-06-17 12:11

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AnnotationSchema',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('type', models.CharField(choices=[('classification', 'Classification'), ('segmentation', 'Semantic Segmentation'), ('detection', 'Object Detection'), ('instance_segmentation', 'Instance Segmentation'), ('keypoint', 'Keypoint Detection'), ('custom', 'Custom Schema')], max_length=25)),
                ('description', models.TextField(blank=True)),
                ('schema_definition', models.JSONField(default=dict, help_text='JSON schema for annotations')),
                ('validation_rules', models.JSONField(default=dict, help_text='Validation rules for the schema')),
                ('example_annotation', models.JSONField(default=dict, help_text='Example annotation for preview')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_public', models.BooleanField(default=False, help_text='Available to all users')),
                ('usage_count', models.IntegerField(default=0)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Annotation Schema',
                'verbose_name_plural': 'Annotation Schemas',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DataPipeline',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('version', models.CharField(default='1.0', max_length=50)),
                ('pipeline_graph', models.JSONField(help_text='Pipeline as nodes and edges JSON')),
                ('input_formats', models.JSONField(default=list, help_text='Supported input formats')),
                ('output_format', models.CharField(help_text='Output format', max_length=100)),
                ('default_parameters', models.JSONField(default=dict, help_text='Default pipeline parameters')),
                ('required_parameters', models.JSONField(default=list, help_text='Required parameter names')),
                ('is_template', models.BooleanField(default=False, help_text='Available as template')),
                ('is_public', models.BooleanField(default=False, help_text='Available to all users')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('usage_count', models.IntegerField(default=0)),
                ('average_execution_time', models.DurationField(blank=True, null=True)),
                ('is_validated', models.BooleanField(default=False, help_text='Pipeline tested and validated')),
                ('validation_results', models.JSONField(default=dict, help_text='Validation test results')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Data Pipeline',
                'verbose_name_plural': 'Data Pipelines',
                'ordering': ['-created_at'],
                'unique_together': {('name', 'created_by', 'version')},
            },
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('version', models.CharField(default='1.0', max_length=50)),
                ('original_filename', models.CharField(max_length=500)),
                ('file_path', models.CharField(max_length=1000)),
                ('extracted_path', models.CharField(blank=True, max_length=1000)),
                ('format_type', models.CharField(choices=[('zip', 'ZIP Archive'), ('tar', 'TAR Archive'), ('folder', 'Folder Structure'), ('csv', 'CSV with Annotations'), ('coco', 'COCO Format'), ('yolo', 'YOLO Format'), ('pascal_voc', 'Pascal VOC'), ('custom', 'Custom Format')], default='zip', max_length=20)),
                ('detected_structure', models.JSONField(default=dict, help_text='Auto-detected file structure')),
                ('total_samples', models.IntegerField(default=0)),
                ('file_size_bytes', models.BigIntegerField(default=0)),
                ('class_distribution', models.JSONField(default=dict, help_text='Distribution of classes/labels')),
                ('statistics', models.JSONField(default=dict, help_text='Dataset statistics')),
                ('status', models.CharField(choices=[('uploading', 'Uploading'), ('extracting', 'Extracting Files'), ('analyzing', 'Analyzing Structure'), ('validating', 'Validating Data'), ('processing', 'Processing'), ('ready', 'Ready for Training'), ('error', 'Error'), ('archived', 'Archived')], default='uploading', max_length=20)),
                ('processing_progress', models.IntegerField(default=0, help_text='Processing progress 0-100')),
                ('error_message', models.TextField(blank=True)),
                ('processing_log', models.JSONField(default=list, help_text='Processing steps log')),
                ('validation_results', models.JSONField(default=dict, help_text='Data validation results')),
                ('quality_score', models.FloatField(blank=True, help_text='Overall quality score 0-1', null=True)),
                ('pipeline_config', models.JSONField(default=dict, help_text='Data processing pipeline config')),
                ('applied_transformations', models.JSONField(default=list, help_text='List of applied transformations')),
                ('is_public', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_used_at', models.DateTimeField(blank=True, null=True)),
                ('compatible_model_types', models.JSONField(default=list, help_text='Compatible ML model types')),
                ('training_ready', models.BooleanField(default=False)),
                ('allowed_users', models.ManyToManyField(blank=True, related_name='accessible_datasets', to=settings.AUTH_USER_MODEL)),
                ('annotation_schema', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dataset_manager.annotationschema')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Dataset',
                'verbose_name_plural': 'Datasets',
                'ordering': ['-created_at'],
                'unique_together': {('name', 'created_by', 'version')},
            },
        ),
        migrations.CreateModel(
            name='PipelineExecution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parameters', models.JSONField(default=dict, help_text='Execution parameters')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('initializing', 'Initializing'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('current_step', models.CharField(blank=True, help_text='Current processing step', max_length=200)),
                ('progress_percentage', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('execution_log', models.JSONField(default=list, help_text='Step-by-step execution log')),
                ('output_metadata', models.JSONField(default=dict, help_text='Output statistics and metadata')),
                ('error_details', models.JSONField(default=dict, help_text='Error information if failed')),
                ('memory_peak_mb', models.IntegerField(blank=True, help_text='Peak memory usage in MB', null=True)),
                ('cpu_time_seconds', models.FloatField(blank=True, help_text='Total CPU time', null=True)),
                ('output_path', models.CharField(blank=True, help_text='Path to processed output', max_length=1000)),
                ('output_size_bytes', models.BigIntegerField(default=0)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pipeline_executions', to='dataset_manager.dataset')),
                ('executed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('pipeline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='dataset_manager.datapipeline')),
            ],
            options={
                'verbose_name': 'Pipeline Execution',
                'verbose_name_plural': 'Pipeline Executions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DatasetSample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_path', models.CharField(help_text='Relative path within dataset', max_length=1000)),
                ('file_name', models.CharField(max_length=500)),
                ('file_size_bytes', models.IntegerField(default=0)),
                ('file_type', models.CharField(help_text='MIME type or file extension', max_length=100)),
                ('sample_index', models.IntegerField(help_text='Index within dataset')),
                ('annotations', models.JSONField(default=dict, help_text='Sample annotations')),
                ('annotation_confidence', models.FloatField(blank=True, help_text='Annotation quality/confidence', null=True)),
                ('is_valid', models.BooleanField(default=True)),
                ('validation_errors', models.JSONField(default=list, help_text='List of validation errors')),
                ('thumbnail_path', models.CharField(blank=True, help_text='Path to thumbnail image', max_length=1000)),
                ('preview_data', models.JSONField(default=dict, help_text='Preview metadata (dimensions, etc.)')),
                ('sample_class', models.CharField(blank=True, help_text='Primary class/label', max_length=200)),
                ('secondary_classes', models.JSONField(default=list, help_text='Additional classes')),
                ('quality_score', models.FloatField(blank=True, help_text='Sample quality score', null=True)),
                ('complexity_score', models.FloatField(blank=True, help_text='Annotation complexity', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samples', to='dataset_manager.dataset')),
            ],
            options={
                'verbose_name': 'Dataset Sample',
                'verbose_name_plural': 'Dataset Samples',
                'ordering': ['sample_index'],
                'unique_together': {('dataset', 'sample_index')},
            },
        ),
    ]
